{% set user = "logout" %}
{% set title = "가이드 UXW 인풋 텍스트"%}
{% extends "../templates/layout.njk" %}
{% block content %}
  <div class="guide-wrap">
    <h2 class="ex-name">Input</h2>
    <div class="ex-content">
      <div class="ex-title">
        <h3>기본</h3>
        <p class="ex-desc">
          기본 text Input 입니다.
          <br/>* 상태가 오류 일시 input-box위치에 error를 사용합니다.
        </p>
      </div>
      <div class="ex-body">
        <div class="ex-preview">
          <div class="input-box">
            <input name="id" class="input" type="text" placeholder="사번을 입력하세요.">
            <button type="button" class="ic-button-clear" aria-label="클리어버튼" aria-pressed="false" data-visible onclick="Input.ClearButton(this)">
              <i class="ic ic-clear"></i>
            </button>
          </div>
          <br/>
          <div class="input-box">
            <input name="id" class="input" type="text" placeholder="사번을 입력하세요." disabled>
            <button type="button" class="ic-button-clear" aria-label="클리어버튼" aria-pressed="false" data-visible onclick="Input.ClearButton(this)">
              <i class="ic ic-clear"></i>
            </button>
          </div>
          <br/>
          <div class="input-box">
            <input name="id" class="input" type="text" placeholder="사번을 입력하세요." readonly>
            <button type="button" class="ic-button-clear" aria-label="클리어버튼" aria-pressed="false" data-visible onclick="Input.ClearButton(this)">
              <i class="ic ic-clear"></i>
            </button>
          </div>
          <br/>
          <div class="input-box error">
            <input name="id" class="input" type="text" placeholder="사번을 입력하세요.">
            <button type="button" class="ic-button-clear" aria-label="클리어버튼" aria-pressed="false" data-visible onclick="Input.ClearButton(this)">
              <i class="ic ic-clear"></i>
            </button>
          </div>
          <div class="html-view">
            <pre>
                <code class="ex-code-block render-html">
                  <div class="input-box">
                    <input name="id" class="input" type="text" placeholder="사번을 입력하세요.">
                    <button type="button" class="ic-button-clear" aria-label="클리어버튼" aria-pressed="false" data-visible onclick="Input.ClearButton(this)">
                      <i class="ic ic-clear"></i>
                    </button>
                  </div>

                  <div class="input-box">
                    <input name="id" class="input" type="text" placeholder="사번을 입력하세요." disabled>
                    <button type="button" class="ic-button-clear" aria-label="클리어버튼" aria-pressed="false" data-visible onclick="Input.ClearButton(this)">
                      <i class="ic ic-clear"></i>
                    </button>
                  </div>

                  <div class="input-box">
                    <input name="id" class="input" type="text" placeholder="사번을 입력하세요." readonly>
                    <button type="button" class="ic-button-clear" aria-label="클리어버튼" aria-pressed="false" data-visible onclick="Input.ClearButton(this)">
                      <i class="ic ic-clear"></i>
                    </button>
                  </div>

                  <div class="input-box error">
                    <input name="id" class="input" type="text" placeholder="사번을 입력하세요.">
                    <button type="button" class="ic-button-clear" aria-label="클리어버튼" aria-pressed="false" data-visible onclick="Input.ClearButton(this)">
                      <i class="ic ic-clear"></i>
                    </button>
                  </div>
                </code>
            </pre>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
{% endblock %}

{% block script %}
<script>
  const Input = {
    // 에러
    Error: function (props) {
      const ARIA_HIDDEN = 'aria-hidden';
      const input = props.parentElement;
      const label = input
        .nextElementSibling
        .classList
        .contains('error');
      input
        .classList
        .add('error');
      if (!label) {
        return;
      }

      const get = input
        .nextElementSibling
        .getAttribute(ARIA_HIDDEN);
      if (get === 'true') {
        input
          .nextElementSibling
          .setAttribute(ARIA_HIDDEN, false);
      }
    },

    // 에러 클리어
    Clear: function (props) {
      const ARIA_HIDDEN = 'aria-hidden';
      const input = props.parentElement;
      const label = input
        .nextElementSibling
        .classList
        .contains('error');
      input
        .classList
        .remove('error');
      if (!label) {
        return;
      }

      const get = input
        .nextElementSibling
        .getAttribute(ARIA_HIDDEN);
      if (get === 'false') {
        input
          .nextElementSibling
          .setAttribute(ARIA_HIDDEN, true);
      }
    },

    // value 삭제버튼
    ClearButton: function (param) {
      if (!param.previousElementSibling) {
        return;
      }

      if (param.previousElementSibling.tagName === 'INPUT') {
        param.previousElementSibling.value = '';
        param
          .classList
          .remove('is-active');

        if (param.previousElementSibling.getAttribute('name') === 'id') {
          const target = document.querySelector('[name="password"]');
          const passwordParent = target.closest('.input-box');
          passwordParent.style.height = '';
          passwordParent.style.marginTop = '0';

          passwordParent
            .classList
            .add('expanding');
          passwordParent
            .classList
            .remove('expand');
          passwordParent
            .classList
            .remove('expanded');

          btnlogin.disabled = true;

        }
      }
    },

    // InputBox value Checker
    Check: function () {
      const elements = document.querySelectorAll('.input-box');

      const onInput = function (event) {
        const value = event.target.value;
        const length = value.length;
        const nextEl = event.target.nextElementSibling;
        if (!nextEl) {
          return;
        }
        if (length > 0) {
          nextEl
            .classList
            .add('is-active');
        } else {
          nextEl
            .classList
            .remove('is-active');
        }
      };
      []
        .forEach
        .call(elements, item => {
          const target = item.querySelector('.input');
          target.addEventListener('keyup', onInput);
          target.addEventListener('keydown', onInput);
          target.addEventListener('change', onInput);
        });
    }
  };

  document.addEventListener('DOMContentLoaded', function () {
    Input.Check();
  })
</script>
{% endblock %}