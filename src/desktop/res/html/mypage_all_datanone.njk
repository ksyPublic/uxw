{% set user = "logout" %}
{% set title = "신한 UX라이팅 시스템 | 마이페이지" %}
{% extends "../templates/layout.njk" %}
{% set activePage = "mypage" %}
{% set datanone = "true" %}
{% set all_data_none = "true" %}
{% set search_data_none = "false" %}
{% block content %}
    {{super()}}
    <div class="ly-content">
        <div class="ly-content-box">
            <!-- 마이페이지 탭 영역 -->
            {% include "../templates/contents/mypage_tab.njk" %}
            <!-- //마이페이지 탭 영역 -->
        </div>

        <!-- 사이드 영역 -->
        <div class="side">
            <div class="side__wrap is-active">
                <h3 class="sr-only">교정 가이드</h3>
                <div class="side__inner">
                    <div class="cumulative">
                        <p class="cumulative__list">
                            <span class="highlight">김신한</span>님은<br/>
                        총 <span class="cumulative__count">0</span>건 콘텐츠를<br/>
                        교정했어요.
                        </p>
                        <span class="cumulative__date">2022년 기준</span>
                    </div>
                    <div id="personalization" class="user-personal">
                        <h4 class="ft18 medium">김신한님을 위한 추천 표현</h4>
                        <div class="expresstion expresstion--type2">
                            <!-- 데이터가 없을시 오픈 -->
                            <div class="none-data none-data--beinfo pxh260">
                                <p>새로운 글을 교정하고<br/>
                                추천표현을 확인해보세요.
                                </p>
                            </div>
                        </div>
                    </div>

                    <!-- 문의내역 -->
                    <div class="box mgt30 grey50-bg">
                        <div class="title--type2">
                            <h4 class="text ft18 medium">내 문의내역</h4>
                            <button class="button button--type4 button--medium" type="button" data-dialog-trigger="#modal2">문의하기</button>
                        </div>
                        <!-- 데이터가 없을시 오픈 -->
                        <div class="none-data none-data--beinfo pxh128">
                            <p>서비스 이용 중<br/>궁금하신 점을 문의해보세요.</p>
                        </div>
                        <!-- //데이터가 없을시 오픈 -->
                    </div>
                    <!-- //문의내역 -->
                </div>
            </div>
        </div>
        <!-- //사이드 영역 -->

        <!-- 문의하기 팝업 -->
        {% include "../templates/popup/inquiry_popup01.njk" %}
        <!-- //문의하기 팝업 -->

        <!-- 답변완료 팝업 -->
        {% include "../templates/popup/inquiry_popup02.njk" %}
        <!-- //답변완료 팝업 -->

        <!-- 답변대기 팝업 -->
        {% include "../templates/popup/inquiry_popup03.njk" %}
        <!-- //답변대기 팝업 -->

        <!-- 용어문의 팝업 -->
        {% include "../templates/popup/inquiry_popup04.njk" %}
        <!-- //용어문의 팝업 -->
    {% endblock %}
    {% block scripts %}
        <script>
            function bookAdd(param) {
                //북마크 클릭시 ui 변경
                const dataChecker = param.getAttribute('data-toggle');
                if (dataChecker === 'false') {
                    param.setAttribute('data-toggle', 'true')
                }
            }

            function bookRemove(param) {
                //북마크 클릭시 ui 변경
                const dataChecker = param.getAttribute('data-toggle');
                if (dataChecker === 'true') {
                    param.setAttribute('data-toggle', 'false')
                }
            }

            const Input = {
                // 에러
                Error: function (props) {
                    const ARIA_HIDDEN = 'aria-hidden';
                    const input = props.parentElement;
                    const label = input
                        .nextElementSibling
                        .classList
                        .contains('error');
                    input
                        .classList
                        .add('error');
                    if (!label) {
                        return;
                    }

                    const get = input
                        .nextElementSibling
                        .getAttribute(ARIA_HIDDEN);
                    if (get === 'true') {
                        input
                            .nextElementSibling
                            .setAttribute(ARIA_HIDDEN, false);
                    }
                },

                // 에러 클리어
                Clear: function (props) {
                    const ARIA_HIDDEN = 'aria-hidden';
                    const input = props.parentElement;
                    const label = input
                        .nextElementSibling
                        .classList
                        .contains('error');
                    input
                        .classList
                        .remove('error');
                    if (!label) {
                        return;
                    }

                    const get = input
                        .nextElementSibling
                        .getAttribute(ARIA_HIDDEN);
                    if (get === 'false') {
                        input
                            .nextElementSibling
                            .setAttribute(ARIA_HIDDEN, true);
                    }
                },

                // value 삭제버튼
                ClearButton: function (param) {
                    if (!param.previousElementSibling) {
                        return;
                    }

                    if (param.previousElementSibling.tagName === 'INPUT') {
                        param.previousElementSibling.value = '';
                        param
                            .classList
                            .remove('is-active');

                        if (param.previousElementSibling.getAttribute('name') === 'id') {
                            const target = document.querySelector('[name="password"]');
                            const passwordParent = target.closest('.input-box');
                            passwordParent.style.height = '';
                            passwordParent.style.marginTop = '0';

                            passwordParent
                                .classList
                                .add('expanding');
                            passwordParent
                                .classList
                                .remove('expand');
                            passwordParent
                                .classList
                                .remove('expanded');
                        }
                    }
                },

                // InputBox value Checker
                Check: function () {
                    const elements = document.querySelectorAll('.input-box');

                    const onInput = function (event) {
                        const value = event.target.value;
                        const length = value.length;
                        const nextEl = event.target.nextElementSibling;
                        if (!nextEl) {
                            return;
                        }
                        if (length > 0) {
                            nextEl
                                .classList
                                .add('is-active');
                        } else {
                            nextEl
                                .classList
                                .remove('is-active');
                        }
                    };
                    []
                        .forEach
                        .call(elements, item => {
                            const target = item.querySelector('.input');
                            target.addEventListener('keyup', onInput);
                            target.addEventListener('keydown', onInput);
                            target.addEventListener('change', onInput);
                        });
                }
            };

            document.addEventListener('DOMContentLoaded', function () {
                Input.Check();
            })
        </script>
    {% endblock %}